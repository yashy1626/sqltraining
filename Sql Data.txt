-- SQL AND , OR , NOT
-- SQL ORDER BY
-- SQL SELECT TOP
-- SQL MIN AND MAX
-- SQL COUNT , AVG , SUM
-- SQL LIKE
-- SQL IN
-- SQL BETWEEN

CREATE DATABASE sqlagop;

USE sqlagop;

CREATE TABLE userdata(id int not null identity(1,1) ,
name varchar(50),
city varchar(50),
age int,
salary int
);

INSERT INTO userdata (name,city,age,salary) VALUES ('John','Selangor',23,5000);
INSERT INTO userdata (name,city,age,salary) VALUES ('Shabina','KL',21,3000);
INSERT INTO userdata (name,city,age,salary) VALUES ('Tom','KL',26,4000);
INSERT INTO userdata (name,city,age,salary) VALUES ('Alex','Selangor',24,8000);
INSERT INTO userdata (name,city,age,salary) VALUES ('Smith','Selangor',18,1000);
INSERT INTO userdata (name,city,age,salary) VALUES ('Nurul','KL',26,6000);
INSERT INTO userdata (name,city,age,salary) VALUES ('Mathews','Selangor',23,5000);
INSERT INTO userdata (name,city,age,salary) VALUES ('Amir','KL',22,3000);
INSERT INTO userdata (name,city,age,salary) VALUES ('Atif','Selangor',25,4500);
INSERT INTO userdata (name,city,age,salary) VALUES ('Ana','KL',19,1500);
INSERT INTO userdata (name,city,age,salary) VALUES ('Thomas','Selangor',27,7500);
INSERT INTO userdata (name,city,age,salary) VALUES ('Christina','KL',22,3500);

SELECT * FROM userdata;


---------------------------------------------------------------------------------------------------


-- PRIMARY KEY AND FOREIGN KEY

-- Primary keys and foreign keys are two types of constraints that can be used to 
-- enforce data integrity in SQL Server tables. 
-- What is data integrity ?
-- Data integrity is a concept and process that ensures the accuracy, 
-- completeness, consistency, and validity of an organization's data.
-- By following the process, organizations not only ensure the integrity 
-- of the data but guarantee they have accurate and correct data in their database.

-- A primary key is used to ensure that data in the specific column is unique. 
-- A column cannot have NULL values

-- In SQL, the FOREIGN KEY constraint is used to create a relationship between two tables. 
-- A foreign key is defined using the FOREIGN KEY and REFERENCES keywords.


USE newdb1;


CREATE TABLE Customers (
    id INTEGER PRIMARY KEY,
    name VARCHAR(100),
    age INTEGER
  );

-- create another table named Products
-- add foreign key to the customer_id column
-- the foreign key references the id column of the Customers table

CREATE TABLE Products (
    customer_id INTEGER ,
    name VARCHAR(100),
    FOREIGN KEY (customer_id)
    REFERENCES Customers(id)
  );


---------------------------------------------------------------------------------------------------

-- SQL GROUP BY AND HAVING CLAUSE

USE db11;

-- Group By Clause

CREATE TABLE PERSON (ID INT NOT NULL, GENDER VARCHAR(20));

INSERT INTO PERSON (ID , GENDER) VALUES (1 , 'MALE');
INSERT INTO PERSON (ID , GENDER) VALUES (2 , 'MALE');
INSERT INTO PERSON (ID , GENDER) VALUES (3 , 'FEMALE');
INSERT INTO PERSON (ID , GENDER) VALUES (4 , 'MALE');
INSERT INTO PERSON (ID , GENDER) VALUES (5 , 'FEMALE');
INSERT INTO PERSON (ID , GENDER) VALUES (6 , 'FEMALE');
INSERT INTO PERSON (ID , GENDER) VALUES (7 , 'MALE');
INSERT INTO PERSON (ID , GENDER) VALUES (8 , 'FEMALE');

SELECT * FROM PERSON;



-- HAVING CLAUSE

CREATE TABLE EMPDETAILS(
EMP_ID INT NOT NULL IDENTITY(1,1),
EMP_SALARY INT NOT NULL,
EMP_CITY VARCHAR(20)
);

INSERT INTO EMPDETAILS (EMP_SALARY , EMP_CITY) VALUES (2000 , 'SELANGOR')
INSERT INTO EMPDETAILS (EMP_SALARY , EMP_CITY) VALUES (4000 , 'SELANGOR')
INSERT INTO EMPDETAILS (EMP_SALARY , EMP_CITY) VALUES (1000 , 'PENANG')
INSERT INTO EMPDETAILS (EMP_SALARY , EMP_CITY) VALUES (3000 , 'PENANG')
INSERT INTO EMPDETAILS (EMP_SALARY , EMP_CITY) VALUES (6000 , 'KL')
INSERT INTO EMPDETAILS (EMP_SALARY , EMP_CITY) VALUES (5000 , 'SELANGOR')
INSERT INTO EMPDETAILS (EMP_SALARY , EMP_CITY) VALUES (7000 , 'PENANG')
INSERT INTO EMPDETAILS (EMP_SALARY , EMP_CITY) VALUES (4000 , 'KL')

SELECT * FROM EMPDETAILS;


---------------------------------------------------------------------------------------------------


-- SQL JOINS

USE db11;

CREATE TABLE employee1(
EmpID INT,EmpFname VARCHAR(50),
EmpLname VARCHAR(50) , Age INT,
EmailID VARCHAR(50),PhoneNo VARCHAR(50),
Address VARCHAR(50))

INSERT INTO employee1 VALUES (1,'Vardhan','Kumar',22,'vardy@abc.com','9876543210','Delhi')
INSERT INTO employee1 VALUES (2,'Himani','Sharma',32,'himani@abc.com','9977554422','Mumbai')
INSERT INTO employee1 VALUES (3,'Aayushi','Shreshth',24,'aayushi@abc.com','9977555121','Kolkata')
INSERT INTO employee1 VALUES (4,'Hemanth','Sharma',25,'hemanth@abc.com','9876545666','Bengaluru')
INSERT INTO employee1 VALUES (5,'Swatee','Kapoor',26,'swatee@abc.com','9544567777','Hyderabad')

CREATE TABLE Project (ProjectID	INT , EmpID INT , ClientID INT , ProjectName VARCHAR(50) ,ProjectStartDate VARCHAR(50))

INSERT INTO Project VALUES (111,1,3,'Project1','4/21/2019')
INSERT INTO Project VALUES (222,2,1,'Project2','2/12/2019')
INSERT INTO Project VALUES (333,3,5,'Project3','1/10/2019')
INSERT INTO Project VALUES (444,3,2,'Project4','4/16/2019')
INSERT INTO Project VALUES (555,5,4,'Project5','5/23/2019')
INSERT INTO Project VALUES (666,9,1,'Project6','1/12/2019')
INSERT INTO Project VALUES (777,7,2,'Project7','7/25/2019')
INSERT INTO Project VALUES (888,8,3,'Project8','8/20/2019')

SELECT * FROM employee1;

SELECT * FROM Project;

------------------------------------------------------------------------------------------------------

-- SQL Subquery

USE db11;

CREATE TABLE EMPLOYEEINFO(
ID INT , NAME VARCHAR(50), AGE INT , ADDRESS VARCHAR(50) , SALARY INT);

INSERT INTO EMPLOYEEINFO (ID , NAME , AGE , ADDRESS , SALARY) VALUES (1,'John',20,'US',2000)
INSERT INTO EMPLOYEEINFO (ID , NAME , AGE , ADDRESS , SALARY) VALUES (2,'Stephan',26,'Dubai',1500)
INSERT INTO EMPLOYEEINFO (ID , NAME , AGE , ADDRESS , SALARY) VALUES (3,'David',27,'Bangkok',2000)
INSERT INTO EMPLOYEEINFO (ID , NAME , AGE , ADDRESS , SALARY) VALUES (4,'Alina',29,'UK',6500)
INSERT INTO EMPLOYEEINFO (ID , NAME , AGE , ADDRESS , SALARY) VALUES (5,'Kathrin',34,'Bangalore',8500)
INSERT INTO EMPLOYEEINFO (ID , NAME , AGE , ADDRESS , SALARY) VALUES (6,'Harry',42,'China',4500)
INSERT INTO EMPLOYEEINFO (ID , NAME , AGE , ADDRESS , SALARY) VALUES (7,'Jackson',25,'Mizoram',10000)

SELECT * FROM EMPLOYEEINFO;